package com.canruoxingchen.uglypic.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.canruoxingchen.uglypic.dao.Footage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FOOTAGE.
*/
public class FootageDao extends AbstractDao<Footage, String> {

    public static final String TABLENAME = "FOOTAGE";

    /**
     * Properties of entity Footage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property FootageIcon = new Property(1, String.class, "footageIcon", false, "FOOTAGE_ICON");
        public final static Property FootageIconName = new Property(2, String.class, "footageIconName", false, "FOOTAGE_ICON_NAME");
        public final static Property FootageOrderNum = new Property(3, Integer.class, "footageOrderNum", false, "FOOTAGE_ORDER_NUM");
        public final static Property FootageParentId = new Property(4, String.class, "footageParentId", false, "FOOTAGE_PARENT_ID");
    };


    public FootageDao(DaoConfig config) {
        super(config);
    }
    
    public FootageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FOOTAGE' (" + //
                "'OBJECT_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "'FOOTAGE_ICON' TEXT," + // 1: footageIcon
                "'FOOTAGE_ICON_NAME' TEXT," + // 2: footageIconName
                "'FOOTAGE_ORDER_NUM' INTEGER," + // 3: footageOrderNum
                "'FOOTAGE_PARENT_ID' TEXT);"); // 4: footageParentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FOOTAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Footage entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        String footageIcon = entity.getFootageIcon();
        if (footageIcon != null) {
            stmt.bindString(2, footageIcon);
        }
 
        String footageIconName = entity.getFootageIconName();
        if (footageIconName != null) {
            stmt.bindString(3, footageIconName);
        }
 
        Integer footageOrderNum = entity.getFootageOrderNum();
        if (footageOrderNum != null) {
            stmt.bindLong(4, footageOrderNum);
        }
 
        String footageParentId = entity.getFootageParentId();
        if (footageParentId != null) {
            stmt.bindString(5, footageParentId);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Footage readEntity(Cursor cursor, int offset) {
        Footage entity = new Footage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // footageIcon
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // footageIconName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // footageOrderNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // footageParentId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Footage entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFootageIcon(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFootageIconName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFootageOrderNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setFootageParentId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Footage entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Footage entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
