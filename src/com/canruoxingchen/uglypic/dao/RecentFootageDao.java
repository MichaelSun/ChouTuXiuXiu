package com.canruoxingchen.uglypic.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.canruoxingchen.uglypic.dao.RecentFootage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RECENT_FOOTAGE.
*/
public class RecentFootageDao extends AbstractDao<RecentFootage, String> {

    public static final String TABLENAME = "RECENT_FOOTAGE";

    /**
     * Properties of entity RecentFootage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property AccessTime = new Property(1, Long.class, "accessTime", false, "ACCESS_TIME");
        public final static Property FootageType = new Property(2, Integer.class, "footageType", false, "FOOTAGE_TYPE");
        public final static Property Json = new Property(3, String.class, "json", false, "JSON");
    };


    public RecentFootageDao(DaoConfig config) {
        super(config);
    }
    
    public RecentFootageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RECENT_FOOTAGE' (" + //
                "'OBJECT_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "'ACCESS_TIME' INTEGER," + // 1: accessTime
                "'FOOTAGE_TYPE' INTEGER," + // 2: footageType
                "'JSON' TEXT);"); // 3: json
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RECENT_FOOTAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecentFootage entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        Long accessTime = entity.getAccessTime();
        if (accessTime != null) {
            stmt.bindLong(2, accessTime);
        }
 
        Integer footageType = entity.getFootageType();
        if (footageType != null) {
            stmt.bindLong(3, footageType);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(4, json);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RecentFootage readEntity(Cursor cursor, int offset) {
        RecentFootage entity = new RecentFootage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // accessTime
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // footageType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // json
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecentFootage entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAccessTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFootageType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setJson(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(RecentFootage entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(RecentFootage entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
