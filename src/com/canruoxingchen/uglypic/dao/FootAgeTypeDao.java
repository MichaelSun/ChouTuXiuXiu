package com.canruoxingchen.uglypic.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.canruoxingchen.uglypic.dao.FootAgeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FOOT_AGE_TYPE.
*/
public class FootAgeTypeDao extends AbstractDao<FootAgeType, String> {

    public static final String TABLENAME = "FOOT_AGE_TYPE";

    /**
     * Properties of entity FootAgeType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property TypeName = new Property(1, String.class, "typeName", false, "TYPE_NAME");
        public final static Property OldName = new Property(2, String.class, "oldName", false, "OLD_NAME");
        public final static Property IsDefault = new Property(3, Integer.class, "isDefault", false, "IS_DEFAULT");
        public final static Property OrderNum = new Property(4, Integer.class, "orderNum", false, "ORDER_NUM");
    };


    public FootAgeTypeDao(DaoConfig config) {
        super(config);
    }
    
    public FootAgeTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FOOT_AGE_TYPE' (" + //
                "'OBJECT_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "'TYPE_NAME' TEXT," + // 1: typeName
                "'OLD_NAME' TEXT," + // 2: oldName
                "'IS_DEFAULT' INTEGER," + // 3: isDefault
                "'ORDER_NUM' INTEGER);"); // 4: orderNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FOOT_AGE_TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FootAgeType entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String oldName = entity.getOldName();
        if (oldName != null) {
            stmt.bindString(3, oldName);
        }
 
        Integer isDefault = entity.getIsDefault();
        if (isDefault != null) {
            stmt.bindLong(4, isDefault);
        }
 
        Integer orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindLong(5, orderNum);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FootAgeType readEntity(Cursor cursor, int offset) {
        FootAgeType entity = new FootAgeType( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // oldName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // isDefault
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // orderNum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FootAgeType entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOldName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsDefault(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setOrderNum(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(FootAgeType entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(FootAgeType entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
