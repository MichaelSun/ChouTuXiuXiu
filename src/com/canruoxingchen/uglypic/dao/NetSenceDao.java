package com.canruoxingchen.uglypic.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.canruoxingchen.uglypic.dao.NetSence;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NET_SENCE.
*/
public class NetSenceDao extends AbstractDao<NetSence, String> {

    public static final String TABLENAME = "NET_SENCE";

    /**
     * Properties of entity NetSence.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property SenceNetIcon = new Property(1, String.class, "senceNetIcon", false, "SENCE_NET_ICON");
        public final static Property SenceParentId = new Property(2, String.class, "senceParentId", false, "SENCE_PARENT_ID");
        public final static Property SenceOrderNum = new Property(3, Integer.class, "senceOrderNum", false, "SENCE_ORDER_NUM");
        public final static Property SenceName = new Property(4, String.class, "senceName", false, "SENCE_NAME");
        public final static Property SenceDescribe = new Property(5, String.class, "senceDescribe", false, "SENCE_DESCRIBE");
        public final static Property InputContent = new Property(6, String.class, "inputContent", false, "INPUT_CONTENT");
        public final static Property InputRect = new Property(7, String.class, "inputRect", false, "INPUT_RECT");
        public final static Property InputFontName = new Property(8, String.class, "inputFontName", false, "INPUT_FONT_NAME");
        public final static Property InputFontSize = new Property(9, Integer.class, "inputFontSize", false, "INPUT_FONT_SIZE");
        public final static Property InputFontColor = new Property(10, Integer.class, "inputFontColor", false, "INPUT_FONT_COLOR");
        public final static Property InputFontAlignment = new Property(11, Integer.class, "inputFontAlignment", false, "INPUT_FONT_ALIGNMENT");
        public final static Property TimeRect = new Property(12, String.class, "timeRect", false, "TIME_RECT");
        public final static Property TimeFontName = new Property(13, String.class, "timeFontName", false, "TIME_FONT_NAME");
        public final static Property TimeFontSize = new Property(14, Integer.class, "timeFontSize", false, "TIME_FONT_SIZE");
        public final static Property TimeFontColor = new Property(15, Integer.class, "timeFontColor", false, "TIME_FONT_COLOR");
        public final static Property TimeFontAlignment = new Property(16, Integer.class, "timeFontAlignment", false, "TIME_FONT_ALIGNMENT");
    };


    public NetSenceDao(DaoConfig config) {
        super(config);
    }
    
    public NetSenceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NET_SENCE' (" + //
                "'OBJECT_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "'SENCE_NET_ICON' TEXT," + // 1: senceNetIcon
                "'SENCE_PARENT_ID' TEXT," + // 2: senceParentId
                "'SENCE_ORDER_NUM' INTEGER," + // 3: senceOrderNum
                "'SENCE_NAME' TEXT," + // 4: senceName
                "'SENCE_DESCRIBE' TEXT," + // 5: senceDescribe
                "'INPUT_CONTENT' TEXT," + // 6: inputContent
                "'INPUT_RECT' TEXT," + // 7: inputRect
                "'INPUT_FONT_NAME' TEXT," + // 8: inputFontName
                "'INPUT_FONT_SIZE' INTEGER," + // 9: inputFontSize
                "'INPUT_FONT_COLOR' INTEGER," + // 10: inputFontColor
                "'INPUT_FONT_ALIGNMENT' INTEGER," + // 11: inputFontAlignment
                "'TIME_RECT' TEXT," + // 12: timeRect
                "'TIME_FONT_NAME' TEXT," + // 13: timeFontName
                "'TIME_FONT_SIZE' INTEGER," + // 14: timeFontSize
                "'TIME_FONT_COLOR' INTEGER," + // 15: timeFontColor
                "'TIME_FONT_ALIGNMENT' INTEGER);"); // 16: timeFontAlignment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NET_SENCE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NetSence entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        String senceNetIcon = entity.getSenceNetIcon();
        if (senceNetIcon != null) {
            stmt.bindString(2, senceNetIcon);
        }
 
        String senceParentId = entity.getSenceParentId();
        if (senceParentId != null) {
            stmt.bindString(3, senceParentId);
        }
 
        Integer senceOrderNum = entity.getSenceOrderNum();
        if (senceOrderNum != null) {
            stmt.bindLong(4, senceOrderNum);
        }
 
        String senceName = entity.getSenceName();
        if (senceName != null) {
            stmt.bindString(5, senceName);
        }
 
        String senceDescribe = entity.getSenceDescribe();
        if (senceDescribe != null) {
            stmt.bindString(6, senceDescribe);
        }
 
        String inputContent = entity.getInputContent();
        if (inputContent != null) {
            stmt.bindString(7, inputContent);
        }
 
        String inputRect = entity.getInputRect();
        if (inputRect != null) {
            stmt.bindString(8, inputRect);
        }
 
        String inputFontName = entity.getInputFontName();
        if (inputFontName != null) {
            stmt.bindString(9, inputFontName);
        }
 
        Integer inputFontSize = entity.getInputFontSize();
        if (inputFontSize != null) {
            stmt.bindLong(10, inputFontSize);
        }
 
        Integer inputFontColor = entity.getInputFontColor();
        if (inputFontColor != null) {
            stmt.bindLong(11, inputFontColor);
        }
 
        Integer inputFontAlignment = entity.getInputFontAlignment();
        if (inputFontAlignment != null) {
            stmt.bindLong(12, inputFontAlignment);
        }
 
        String timeRect = entity.getTimeRect();
        if (timeRect != null) {
            stmt.bindString(13, timeRect);
        }
 
        String timeFontName = entity.getTimeFontName();
        if (timeFontName != null) {
            stmt.bindString(14, timeFontName);
        }
 
        Integer timeFontSize = entity.getTimeFontSize();
        if (timeFontSize != null) {
            stmt.bindLong(15, timeFontSize);
        }
 
        Integer timeFontColor = entity.getTimeFontColor();
        if (timeFontColor != null) {
            stmt.bindLong(16, timeFontColor);
        }
 
        Integer timeFontAlignment = entity.getTimeFontAlignment();
        if (timeFontAlignment != null) {
            stmt.bindLong(17, timeFontAlignment);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NetSence readEntity(Cursor cursor, int offset) {
        NetSence entity = new NetSence( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // senceNetIcon
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // senceParentId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // senceOrderNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // senceName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // senceDescribe
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // inputContent
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // inputRect
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // inputFontName
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // inputFontSize
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // inputFontColor
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // inputFontAlignment
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // timeRect
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // timeFontName
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // timeFontSize
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // timeFontColor
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16) // timeFontAlignment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NetSence entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSenceNetIcon(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSenceParentId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSenceOrderNum(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSenceName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSenceDescribe(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInputContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInputRect(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInputFontName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInputFontSize(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setInputFontColor(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setInputFontAlignment(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setTimeRect(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTimeFontName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTimeFontSize(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setTimeFontColor(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setTimeFontAlignment(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(NetSence entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(NetSence entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
